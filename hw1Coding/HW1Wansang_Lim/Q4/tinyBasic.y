%{
#include <iostream>

using namespace std;

int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
};

%start program 

%token <val> Digit
%token Keywords CR Print PLUMIN STRING Clear VAR COMMA
%token LPAREN RPAREN Goto RELOP If Then Input Let Equal 
%token Gosub Return List Run End NewLine MULDIV


%%

program : lines{};

lines : line{} | lines line {std::cerr << "AAAA " << std::endl;}  ;

line : number statement CR {}
	| statement CR  {}
	;

statement : Print expr_list {}
		| If expression RELOP expression Then statement {}
		| Goto expression {}
		| Input var_list {}
		| Let VAR Equal expression {}
		| Gosub expression {}
		| Return {}
		| Clear {}
		| List {}
		| Run {}
		| End {}
		;

expr_list : STRING {}
		| expr_list COMMA STRING {}  
		| expr_list COMMA expression {}
		| expression{} ;


expression : PLUMIN factor {} 
		| PLUMIN term expression {} ; 

term : factor {}
	|facTerm {} ;

facTerm : {} | facTerm MULDIV factor {};

factor : VAR {} | number {}
		LPAREN expression RPAREN {} ;

var_list : VAR {}
		| var_list COMMA VAR{};


number : Digit {}
		| Digit number {} ;



%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}